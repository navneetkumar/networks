# This file contains device-specific configuration information
# that is read by the infrastructure at launch.
# Property names beginning with "config." are reserved and should not be used.

#------------------------------------------------
# debug config
#   Levels: v:2  d:3  i:4  w:5  e:6
#------------------------------------------------

debug.enable=1
debug.level=5

#------------------------------------------------
# basic network config values
#------------------------------------------------

# hostname must be a full name.  Until you reach the DDNS project,
# what name you use doesn't matter.
net.host.name=client.

# You can optionally specify the local IP address to use.
# This can help if IPFinder is confused.  It's also useful
# if you want to operate on localhost.  If you don't want
# to specify, comment it out.
#net.host.ip=localhost

# Our applications are (mostly) client server.  If the 
# client apps ask you for the server's ip each time you run
# them, it gets pretty tedious when you're debugging.  You
# can specify a server IP address for the apps to use here.
# (You can modify code so that it asks you for the server's
# IP if you find you often want to use more than one server.)
net.server.ip=cse461.cs.washington.edu

# default server socket timeout value for entire system (in msec.)
net.timeout.granularity=500

# default timeout when reading from a socket (in msec.)
net.timeout.socket=15000

# list of class names of services to be started
net.services=edu.uw.cs.cse461.net.tcpmessagehandler.TCPMessageHandlerService \
             edu.uw.cs.cse461.net.rpc.RPCService \
             edu.uw.cs.cse461.net.rpc.RPCCall \
             edu.uw.cs.cse461.net.ddns.DDNSService \
             edu.uw.cs.cse461.net.ddns.DDNSResolverService \
	         edu.uw.cs.cse461.httpd.HTTPDService
            
# List of class names of console applications to load
#   and name of initial application to launch.
# (Ignored if running under Android.)
console.apps= \
        edu.uw.cs.cse461.consoleapps.example.DDNSAgent \
        edu.uw.cs.cse461.consoleapps.example.DumpServiceState \
        edu.uw.cs.cse461.consoleapps.example.EchoRaw \
        edu.uw.cs.cse461.consoleapps.example.EchoTCPMessageHandler \
        edu.uw.cs.cse461.consoleapps.example.EchoRPC \
        edu.uw.cs.cse461.consoleapps.example.EchoDDNS \
        edu.uw.cs.cse461.consoleapps.example.ListInterfaces \
        edu.uw.cs.cse461.consoleapps.example.Nslookup \
        edu.uw.cs.cse461.consoleapps.example.SolutionManager \
        edu.uw.cs.cse461.consoleapps.example.Version \
        edu.uw.cs.cse461.consoleapps.example.WhoAmI \
        edu.uw.cs.cse461.testing.client.TestManager \
        edu.uw.cs.cse461.consoleapps.DataXferRaw \
        edu.uw.cs.cse461.consoleapps.DataXferTCPMessageHandler \
        edu.uw.cs.cse461.consoleapps.DataXferRPC \
        edu.uw.cs.cse461.consoleapps.PingRaw \
        edu.uw.cs.cse461.consoleapps.PingTCPMessageHandler \
        edu.uw.cs.cse461.consoleapps.PingRPC \
        
# This name must be a Java class name
console.initialapp=edu.uw.cs.cse461.consoleapps.infrastructure.AppManager

# List of class names of Android applications to load
android.apps=edu.uw.cs.cse461.androidapps.Infrastructure.AndroidAppManager \
             edu.uw.cs.cse461.androidapps.DumpServiceStateActivity   \
             edu.uw.cs.cse461.androidapps.EchoRawActivity   \
             edu.uw.cs.cse461.androidapps.VersionActivity   \
             edu.uw.cs.cse461.androidapps.solution.PingRPCActivity   \
             edu.uw.cs.cse461.androidapps.solution.PingTCPMessageHandlerActivity   \
             edu.uw.cs.cse461.androidapps.solution.SNetActivity      \
             
# This name must be the one provided by app.loadablename()
android.initialapp=AndroidAppManager

#------------------------------------------------
# TCPMessageHandler config
#------------------------------------------------

tcpmessagehandler.maxmsglength=2097148

#------------------------------------------------
# rpc config
#------------------------------------------------
rpc.persistence.timeout=30000

#------------------------------------------------
# ddns resolver config
#------------------------------------------------
ddns.resolver.cache.timeout=60000
ddns.resolver.serverttl=10
ddns.resolver.password=testpwd.client

#------------------------------------------------
# ddns root config
#------------------------------------------------
ddns.root.ip=cse461.cs.washington.edu
ddns.root.port=46120

#------------------------------------------------
# ddns service config
#------------------------------------------------
ddns.service.nodes=soa:client.:testpwd.client \
       a:arecord.client.:testpwd.client \
	   cname:cname.client.:arecord.client:testpwd.client \
	   cname:loop.client.:loop3.ddns.test.:testpwd.client \

ddns.service.init=arecord.client.:10.20.30.40:50
         
ddns.service.cleaninterval=120000  
ddns.service.resolvettl=300

#------------------------------------------------
# httpd config
#------------------------------------------------
httpd.name=localhostclient.www

#------------------------------------------------
# Filexfer configs
#------------------------------------------------

dataxfer.server.ip=cse461.cs.washington.edu

# The raw server uses four consecutive ports, starting at baseport, for xfer sizes of 1000, 10000, 100000, and 1000000 bytes.
# There are both UDP and TCP sockets bound to those four port numbers.
dataxferraw.server.baseport=46104


dataxferrpc.maxlength=14000000

#------------------------------------------------
# SNet configs
#------------------------------------------------

# the maximum number of bytes fetchPhoto() is willing to return in a single call 
snet.fetchphoto.maxlength=1400000
snet.name=client.

#------------------------------------------------
# test config settings
#------------------------------------------------
test.team=Member One and Member Two
test.server.ip=cse461.cs.washington.edu
test.timeout.socket=2000

#test.target=solution

#------------------------------------------------
# rpc test code configs
#------------------------------------------------

test.rpc.transcriptserver.ip=
test.rpc.transcriptserver.port=

test.rpc.server.ip=cse461.cs.washington.edu
test.rpc.server.port=46120

test.rpc.client.configfilename=client.config.ini
test.rpc.server.configfilename=server.config.ini

#------------------------------------------------
# ddns test code configs
#------------------------------------------------
# Where to send a transcript of the output.  Assign to blank 
# to omit sending a transcript anywhere.
test.ddns.transcriptserver.ip=
test.ddns.transcriptserver.port=

#------------------------------------------------
# snet test code configs
#------------------------------------------------

test.snet.server.name=.
test.snet.testsuite=uw12au
test.snet.initialdataset=initialSet


#------------------------------------------------
# solution manager configs
#------------------------------------------------

solutionmanager.console.apps=edu.uw.cs.cse461.consoleapps.solution.DataXferRawSolution \
        edu.uw.cs.cse461.consoleapps.solution.DataXferRPCSolution \
        edu.uw.cs.cse461.consoleapps.solution.DataXferTCPMessageHandlerSolution \
        edu.uw.cs.cse461.consoleapps.solution.PingRawSolution \
        edu.uw.cs.cse461.consoleapps.solution.PingRPCSolution \
        edu.uw.cs.cse461.consoleapps.solution.PingTCPMessageHandlerSolution \
        edu.uw.cs.cse461.consoleapps.solution.PingDDNSSolution \
        
#------------------------------------------------
# test manager configs
#------------------------------------------------

testmanager.console.apps=edu.uw.cs.cse461.testing.client.PingRawTest \
        edu.uw.cs.cse461.testing.client.DataXferRawTest \
        edu.uw.cs.cse461.testing.client.PingTCPMessageHandlerTest \
		edu.uw.cs.cse461.testing.client.DataXferTCPMessageHandlerTest \
        edu.uw.cs.cse461.testing.client.PingRPCTest \
        edu.uw.cs.cse461.testing.client.DataXferRPCTest \
        edu.uw.cs.cse461.consoleapps.test.RPCTest \
         
testmanager.outputdir=../ConsoleRun/TestResults
 